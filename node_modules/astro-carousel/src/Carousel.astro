---
import type { ComponentProps } from "astro/types";
import CarouselSlide from "./CarouselSlide.astro";

interface Props {
  images: Array<ComponentProps<typeof CarouselSlide>>;
  color?: string;
}
const { images = [], color = '#333' } = Astro.props;
---

<script>
  import { Carousel } from "./scripts/carousel";

  class CarouselWrapper extends HTMLElement {
    private carouselTargetList: HTMLElement | null = null;
    private carousel: Carousel;
    private _openHandler: (e: MouseEvent | KeyboardEvent) => void;

    constructor() {
      super();
    }

    connectedCallback() {
      const carouselElement = this.querySelector("#carousel");
      this.carousel = new Carousel(carouselElement as HTMLElement);
      this.carouselTargetList = document.getElementById("carouselTargetList");

      this._openHandler = this._handleOpen.bind(this);
      this.carouselTargetList?.addEventListener("click", this._openHandler);
      this.carouselTargetList?.addEventListener("keydown", this._openHandler);
    }

    disconnectedCallback() {
      this.carouselTargetList?.removeEventListener("click", this._openHandler);
      this.carouselTargetList?.removeEventListener("keydown", this._openHandler);
      this.carousel.close();
    }

    private _handleOpen(this: CarouselWrapper, e: MouseEvent | KeyboardEvent) {
      if (e.target instanceof HTMLElement) {
        const carouselIndex =
          e.target.closest<HTMLElement>("[data-carousel-index]")?.dataset.carouselIndex;

        if (e instanceof KeyboardEvent && e.key !== "Enter") {
          return;
        }

        e.preventDefault();

        const imgIndex = Number(carouselIndex);
        this.carousel.open(imgIndex);
      }
    }
  }

  customElements.define("carousel-wrapper", CarouselWrapper);
</script>

<carousel-wrapper>
  <div
    id="carousel-dialog"
    aria-hidden="true"
    class="carousel"
    aria-label="Carousel"
  >
    <div
      class="carousel__overlay"
      data-a11y-dialog-hide
    >
    </div>
    <div
      id="carousel"
      role="document"
    >
      <button
        type="button"
        id="closeButton"
        class="carousel__button carousel__close"
        aria-label="Close carousel"
      >
        <svg
          class="carousel__svg"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M6 18L18 6M6 6l12 12"
          ></path>
        </svg>
      </button>
      <div
        id="carousel__wrapper"
        class="carousel__wrapper"
      >
        <div class="carousel__main">
          <!-- Prev Link -->
          <a
            class="carousel__button carousel__button--arrow"
            aria-label="Go to previous photo"
            id="prevLink"
          >
            <svg
              class="carousel__svg"
              id="prev"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"
              ></path>
            </svg>
          </a>

          <!-- Slides -->
          <ul
            class="carousel__slides"
            id="slides"
          >
            {images.map((image, i) => <CarouselSlide {...image} />)}
          </ul>

          <!-- Next Link -->
          <a
            class="carousel__button carousel__button--arrow carousel__button--right"
            aria-label="Go to next photo"
            id="nextLink"
          >
            <svg
              class="carousel__svg"
              id="next"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"
              ></path>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </div>
</carousel-wrapper>

<style lang="scss" define:vars={{ astroCarouselColor: color }}>
  * {
    box-sizing: border-box;
  }
  .carousel {
    display: unset;
    background-color: rgba(250, 250, 250, 0.5);
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);

    &[aria-hidden="true"] {
      display: none;
    }

    &,
    &__overlay {
      position: fixed;
      inset: 0;
      user-select: none;
      z-index: 1;
    }

    &--active {
      display: unset;
    }

    &__close {
      position: absolute;
      right: 0;
    }

    &__wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
    }
    &__main {
      display: grid;
      grid-template-columns: 0.25fr minmax(0, 100%) 0.25fr;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      height: 100%;
      @media screen and (min-width: 768px) {
        grid-template-columns: 0.25fr minmax(0, 0.9fr) 0.25fr;
      }
    }
    &__slides {
      padding: 0;
      margin: 0;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: calc(100% - 48px * 2);
    }
    &__button {
      width: 48px;
      height: 48px;
      border: none;
      background: none;
      margin: 1rem;
      padding: 0;
      color: var(--astroCarouselColor);
      z-index: 2;
      &:hover {
        cursor: pointer;
        opacity: 0.6;
      }
      &:focus-visible {
        outline: dashed 2px var(--astroCarouselColor);
      }

      &--right {
        justify-self: end;
        justify-content: flex-end;
      }
      &--arrow {
        display: flex;
        align-items: center;
        height: 50vh;
        margin: 0;
        @media screen and (min-width: 768px) {
          margin: 1rem;
        }
      }
    }
    &__svg {
      width: 24px;
      height: 24px;
      @media screen and (min-width: 768px) {
        width: 48px;
        height: 48px;
      }
    }
  }
</style>
